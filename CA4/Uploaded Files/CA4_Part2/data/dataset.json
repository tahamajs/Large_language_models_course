[
    {
        "question_id": 324,
        "db_id": "toxicology",
        "question": "Find the percentage of atoms with single bond. (Evidence: single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage)",
        "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
        "difficulty": "simple",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 211,
        "db_id": "toxicology",
        "question": "Indicate which atoms are connected in non-carcinogenic type molecules. (Evidence: label = '-' means molecules are non-carcinogenic)",
        "evidence": "label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
        "difficulty": "simple",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 245,
        "db_id": "toxicology",
        "question": "What is the average number of bonds the atoms with the element iodine have? (Evidence: atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i')",
        "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
        "SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "difficulty": "moderate",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 272,
        "db_id": "toxicology",
        "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon. (Evidence: carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic)",
        "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
        "SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
        "difficulty": "moderate",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 230,
        "db_id": "toxicology",
        "question": "What are the elements of the toxicology and label of molecule TR060? (Evidence: TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium)",
        "evidence": "TR060 is the molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "difficulty": "challenging",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 268,
        "db_id": "toxicology",
        "question": "What are the elements for bond id TR001_10_11? (Evidence: element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium)",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
        "difficulty": "challenging",
        "schema": "atom (atom_id, molecule_id, element)\nbond (bond_id, molecule_id, bond_type)\nconnected (atom_id, atom_id2, bond_id)\nmolecule (molecule_id, label)\n"
    },
    {
        "question_id": 768,
        "db_id": "superhero",
        "question": "How many superheroes were published by Dark Horse Comics? (Evidence: published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';)",
        "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
        "difficulty": "simple",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 787,
        "db_id": "superhero",
        "question": "What are the race and alignment of Cameron Hicks? (Evidence: Cameron Hicks refers to superhero_name = 'Cameron Hicks';)",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
        "difficulty": "simple",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 753,
        "db_id": "superhero",
        "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color. (Evidence: height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to eye_colour_id = 1)",
        "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to eye_colour_id = 1",
        "SQL": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour LIKE 'No Colour'",
        "difficulty": "moderate",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 751,
        "db_id": "superhero",
        "question": "List down at least five superpowers of male superheroes. (Evidence: male refers to gender = 'Male'; superpowers refers to power_name;)",
        "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "difficulty": "moderate",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 743,
        "db_id": "superhero",
        "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics. (Evidence: published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100))",
        "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
        "SQL": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "difficulty": "challenging",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 829,
        "db_id": "superhero",
        "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes. (Evidence: DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics; if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));)",
        "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; if SUM(publisher_name = 'DC Comics') > SUM(publisher_name = 'Marvel Comics'), it means DC Comics published more superheroes than Marvel Comics; if SUM(publisher_name = 'Marvel Comics') > SUM(publisher_name = 'Marvel Comics'), it means Marvel Comics published more heroes than DC Comics; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
        "SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "difficulty": "challenging",
        "schema": "alignment (id, alignment)\nattribute (id, attribute_name)\ncolour (id, colour)\ngender (id, gender)\npublisher (id, publisher_name)\nrace (id, race)\nsuperhero (id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg)\nhero_attribute (hero_id, attribute_id, attribute_value)\nsuperpower (id, power_name)\nhero_power (hero_id, power_id)\n"
    },
    {
        "question_id": 1358,
        "db_id": "student_club",
        "question": "Who was the first one paid his/her dues? Tell the full name. (Evidence: full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues')",
        "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
        "difficulty": "simple",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    },
    {
        "question_id": 1423,
        "db_id": "student_club",
        "question": "How many income are received with an amount of 50? (Evidence: amount of 50 refers to amount = 50)",
        "evidence": "amount of 50 refers to amount = 50",
        "SQL": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
        "difficulty": "simple",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    },
    {
        "question_id": 1398,
        "db_id": "student_club",
        "question": "Name the event with the highest amount spent on advertisement. (Evidence: event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement')",
        "evidence": "event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "moderate",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    },
    {
        "question_id": 1390,
        "db_id": "student_club",
        "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event? (Evidence: DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100)",
        "evidence": "DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "difficulty": "moderate",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    },
    {
        "question_id": 1339,
        "db_id": "student_club",
        "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October. (Evidence: events in September and October refers to month(expense_date) = 9 AND MONTH(expense_date) = 10)",
        "evidence": "events in September and October refers to month(expense_date) = 9 AND MONTH(expense_date) = 10",
        "SQL": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "difficulty": "challenging",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    },
    {
        "question_id": 1448,
        "db_id": "student_club",
        "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars. (Evidence: name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100)",
        "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100",
        "SQL": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
        "difficulty": "challenging",
        "schema": "event (event_id, event_name, event_date, type, notes, location, status)\nmajor (major_id, major_name, department, college)\nzip_code (zip_code, type, city, county, state, short_state)\nattendance (link_to_event, link_to_member)\nbudget (budget_id, category, spent, remaining, amount, event_status, link_to_event)\nexpense (expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget)\nincome (income_id, date_received, amount, source, notes, link_to_member)\nmember (member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major)\n"
    }
]